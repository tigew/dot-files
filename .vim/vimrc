" Plugins {{{

call plug#begin()

Plug 'FelikZ/ctrlp-py-matcher'                                     " CrtlP matcher writen in python
Plug 'SirVer/ultisnips'                                            " Snippits
Plug 'Valloric/YouCompleteMe'                                      " Realtime autocomplete engine for vim
Plug 'airblade/vim-gitgutter'                                      " Displays what lines have changed (git)
Plug 'easymotion/vim-easymotion'                                   " jump search in vim, spacemacs spc-spc-letter
Plug 'ervandew/supertab'                                           " Allows the use of tab to do completions
Plug 'gcmt/wildfire.vim'                                           " Easier selection of text blocks
Plug 'honza/vim-snippets'                                          " Snippits
Plug 'itchyny/lightline.vim'                                       " Badass bottom line in vim
Plug 'jaxbot/semantic-highlight.vim'                               " Rainbow variables
Plug 'jiangmiao/auto-pairs'                                        " Insert or delete brackets in pair
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' } " Lazy way to install fzf
Plug 'junegunn/fzf.vim'                                            " fzf commands for vim beyond ':FZF'
Plug 'kien/ctrlp.vim'                                              " Fuzzy file searcher
Plug 'kristijanhusak/vim-multiple-cursors'                         " Name is self explainitory
Plug 'majutsushi/tagbar'                                           " ctags view for files
Plug 'marcweber/vim-addon-mw-utils'                                " I'm not really sure, but it's not hurting anything
Plug 'mattn/emmet-vim'                                             " HTML snippet short cut, see git repo for more info
Plug 'osyo-manga/vim-over'                                         " Makes find and replace in vim god mode by showing preview
Plug 'scrooloose/nerdtree'                                         " File explorer
Plug 'skammer/vim-css-color'                                       " Displays the color of the css on it itself
Plug 'szw/vim-ctrlspace'                                           " Better tabswitcher, consider changing to leader
Plug 't9md/vim-choosewin'                                          " Much faster split navigation
Plug 'tomtom/tlib_vim'                                             " Likely needed for another plugin, don't remove
Plug 'tpope/vim-commentary'                                        " Comments on drugs
Plug 'tpope/vim-fugitive'                                          " Git wrapper for vim
Plug 'tpope/vim-markdown'                                          " Markdown stuffs for vim
Plug 'tpope/vim-surround'                                          " Self explainitory, surround stuff easier
Plug 'vim-scripts/Align'                                           " Aligns on a specified character, look at repo for more info
Plug 'wesQ3/vim-windowswap'                                        " Swap 2 window positions without ruining layout, not working
Plug 'whatyouhide/vim-gotham'                                      " Sweet dark theme
Plug 'scrooloose/syntastic'                                         " Syntax checker

" plugins start line 5
call plug#end()            " required
" }}}

" Plugin Settings {{{
let g:UltiSnipsExpandTrigger="<Leader><Tab>"
let g:UltiSnipsJumpBackwardTrigger="<Leader>e"
let g:UltiSnipsJumpForwardTrigger="<Leader>w"
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
let g:solarized_termcolors=256
let g:windowswap_map_keys = 0 "prevent default bindings
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'
let g:tagbar_ctags_bin = '/usr/local/Cellar/ctags/5.8_1/bin/ctags'
map <Leader>[ :NERDTreeToggle<CR>
nmap <Leader>] :TagbarToggle<CR>
let g:EclimCompletionMethod = 'omnifunc'


" ctrp crap to speed it up
let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ -g ""'
let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }

" Choose win (Big ass letter switching)
nmap  -  <Plug>(choosewin)
let g:choosewin_overlay_enable = 1
" }}}

" General (lag tab) {{{

autocmd BufNewFile,BufReadPost *.md set filetype=markdown " markdown magic, praise tpope"
set colorcolumn=80                              " 80 character column

if has("gui_macvim")
    set fullscreen                              " force vim to load as full screen macvim only
endif

set background=dark                             " makes shit dark as fuck
colorscheme gotham                              " colortheme
set nocompatible                                " Changes a lot of shit, refer to help if confused
set foldmethod=syntax                           " How folds are marked
set linebreak                                   " Changed linebreak behavior, undetered if I want to keep
set number                                      " Display line number
set hidden                                      " Voodoo, refer to help if needed
set laststatus=2                                " control option to how the status line is shown
set t_Co=256                                    " number of colors, not sure if needed
syntax on                                       " display syntax, no shit
filetype plugin indent on                       " Not sure if needed
set encoding=utf-8                              " set encoding to utf-8
set fileencodings=utf-8                         " set encoding to utf-8
set autoindent                                  " preserves indent level when moving lines
set smartindent                                 " like the former but smarterer
set cindent                                     " see help
set expandtab                                   " uses spaces when tabing
set smarttab                                    " Tab on drugs
set shiftwidth=2                                " how many spaces tab does
set softtabstop=2                               " how many spaces tab does
set tabstop=2                                   " how many spaces tab does
set wildignore=*.pyc                            " Global ignore list, this dosn't hurt nor seems to help
set ignorecase                                  " search related
set smartcase                                   " overrides if capital is found
set hlsearch                                    " hilight searches
set incsearch                                   " search in realtime
set shiftround                                  " magic?
set history=1000                                " History level saved
set undolevels=1000                             " undo level saved
set noswapfile                                  " Gets rid of swap file, I'm going to be sad about this one day
set nobackup                                    " see previous
set linespace=3                                 " number of pixels between lines
set cursorline                                  " Highlight current line
set guifont=Source_Code_Pro_for_Powerline:h12   " font
set splitbelow                                  " moves cursor to split below
set splitright                                  " moves cursor to split right
autocmd FileType vim setlocal foldmethod=marker " set fold method for vimrc specificaly
autocmd VimEnter * NERDTree                     " Toggle nerd tree on start up
autocmd VimEnter * wincmd p                     " change focus to main window

" Remove trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" section start line 81
" }}}

" Some Useful Key Mappings {{{

"Deselecting highlights
nmap <Leader>x :let @/=''<CR>

"System clipboard
vmap <Leader>y "+y
vmap <Leader>d "+d
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

"split remaps
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"Keep the cursor in the same place after yank
vmap y ygv<Esc>

"Reload vimrc
nmap <F5> :source ~/.vimrc<CR>

"Keep selection after indent
vnoremap > ><CR>gv
vnoremap < <<CR>gv

"Remake create splits
nmap <silent> <Leader>s :split<CR>
nmap <silent> <Leader>v :vsplit<CR>

"Mapping to open vimrc
command Vrc e ~/.vim/vimrc

" }}}

" Lightling Settings {{{
let g:lightline = {
      \ 'colorscheme': 'gotham',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ], ['ctrlpmark'] ],
      \   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'fugitive': 'LightLineFugitive',
      \   'filename': 'LightLineFilename',
      \   'fileformat': 'LightLineFileformat',
      \   'filetype': 'LightLineFiletype',
      \   'fileencoding': 'LightLineFileencoding',
      \   'mode': 'LightLineMode',
      \   'ctrlpmark': 'CtrlPMark',
      \ },
      \ 'component_expand': {
      \   'syntastic': 'SyntasticStatuslineFlag',
      \ },
      \ 'component_type': {
      \   'syntastic': 'error',
      \ },
      \ 'subseparator': { 'left': '|', 'right': '|' }
      \ }

function! LightLineModified()
  return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightLineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction

function! LightLineFilename()
  let fname = expand('%:t')
  return fname == 'ControlP' ? g:lightline.ctrlp_item :
        \ fname == '__Tagbar__' ? g:lightline.fname :
        \ ('' != LightLineReadonly() ? LightLineReadonly() . ' ' : '') .
        \ ('' != fname ? fname : '[No Name]') .
        \ ('' != LightLineModified() ? ' ' . LightLineModified() : '')
endfunction

function! LightLineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|NERD' && exists('*fugitive#head')
      let mark = ''  " edit here for cool mark
      let _ = fugitive#head()
      return strlen(_) ? mark._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightLineFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! LightLineFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname == '__Tagbar__' ? 'Tagbar' :
        \ fname == 'ControlP' ? 'CtrlP' :
        \ fname =~ 'NERD_tree' ? 'NERDTree' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPMark()
  if expand('%:t') =~ 'ControlP'
    call lightline#link('iR'[g:lightline.ctrlp_regex])
    return lightline#concatenate([g:lightline.ctrlp_prev, g:lightline.ctrlp_item
          \ , g:lightline.ctrlp_next], 0)
  else
    return ''
  endif
endfunction

let g:ctrlp_status_func = {
  \ 'main': 'CtrlPStatusFunc_1',
  \ 'prog': 'CtrlPStatusFunc_2',
  \ }

function! CtrlPStatusFunc_1(focus, byfname, regex, prev, item, next, marked)
  let g:lightline.ctrlp_regex = a:regex
  let g:lightline.ctrlp_prev = a:prev
  let g:lightline.ctrlp_item = a:item
  let g:lightline.ctrlp_next = a:next
  return lightline#statusline(0)
endfunction

function! CtrlPStatusFunc_2(str)
  return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
    let g:lightline.fname = a:fname
  return lightline#statusline(0)
endfunction

augroup AutoSyntastic
  autocmd!
  autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
  SyntasticCheck
  call lightline#update()
endfunction

" }}}
